class Polynomial:
	Инициализация полинома.
	def Нахождение значения производной полинома при заданном х.
	def Вычисление значения полинома при заданном х.
	def Нахождение корней полинома. 
class Matrix:
	Инициализация матрицы произвольного размера.
	Overload операторов +, -, *, ==, len, __str__, __getitem__.
	def transpose(self): 
		Принимает произвольную матрицу.
		Возвращает транспозицию матрицы.
	def shape(self): 
		Принимает произвольную матрицу.
		Возвращает размеры матрицы
	def concat(self, matrix2): 
		Принимает две произвольные матрицы.
		Возвращает новую матрицу "скленную" из двух матриц, доступно два режима 'bottom' и 'right'.
	def REF(self): 
		Принимает произвольную матрицу.
		Возвращает матрицу в REF.
	def rank(self):
		Принимает произвольную матрицу. 
		Возвращает ранг матрицы.
	def defect(self): 
		Принимает произвольную матрицу.
		Возвращает дефект матрицы.
	def image(self): 
		Принимает произвольную матрицу.
		Возвращает лист из базисных векторов для образа(column space) матрицы.

	def orthogonalization(system): (Алгоритм Грэм-Шмидта)
		Принимает лист из векторов(матриц размера 1xn). 
		Возвращает лист из ортогональных базисных векторов 

	def normalization_vector(u):
		Принимает вектор(матрицу размера 1хn).
		Возвращает нормированный вектор.

	def normalization_system(system):
		Принимает лист из векторов(матриц размера 1хn).
		Возвращает нормированную систему из векторов.

	*def SVD(self): (Сингулярное числовое разложение)
		Принимает матрицу.
		Возвращает лист из трех новых матриц.

class SquareMatrix():
	Инициализация квадратной матрицы произвольного размера.
	Overload операторов +, -, *, ==, len, __str__, **.

	def inverse(self): 
		Принимает произвольную квадратную матрицу.
		Возвращает обратную матрицу(если обратима).

	def det(self):
		Принимает произвольную квадратную матрицу.
		Возвращает определитель матрицы.

	def trace(self):
		Принимает произвольную квадратную матрицу.
		Возвращает сумму диагональных элементов матрицы.

	def diag(size):
		Принимает число size (int).
		Возвращает единичную квадратную матрицу размера size.

	
	def null(size):
		Принимает число size (int).
		Возвращает нулевую квадратную матрицу размера size. 

	def cofactor(self, i, j):
		Принимает произвольную квадратную матрицу и два числа i(int), j(int).
		Возвращает кофактор матрицу с индексами i, j.

	def charac_polynom(self):
		Принимает произвольную квадратную матрицу.
		Возвращает характеристический полином матрицы.

	def principal_minor(self, tuple):
		Принимает произвольную квадратную матрицу, tuple с числами (i, j, ...)
		Возвращает главный минор матрицы, полученный удалением колоны и строки из (i, j, ...)

	def ker(self):
		Принимает произвольную квадратную матрицу.
		Возвращает лист из базисных векторов ядра(kernel) матрицы.

	*def eigenvalues(self):
		Принимает произвольную квадратную матрицу.
		Возвращает лист из собственных значений матрицы.

	*def eigendecomp(self): (Диагональное разложение матрицы)
		Принимает произвольную квадратную матрицу.
		Возвращает диагональное разложение матрицы, если возможно.

	def creatediag(l):
		Принимает лист из чисел.
		Возвращает квадратную диагональную матрицу, по диагонали которой расположены элементы листа.

	*def square_root(self): 
		Принимает произвольную квадратную матрицу.
		Возвращает его "квадратный корень", если возможно.

	*def LU(self): (LU разложение матрицы), частный случсай PLU разложения)
		Принимает произвольную квадратную матрицу.
		Возвращает лист из двух матриц, если возможно.

	*def PLU(self): (PLU разложение матрицы))
		Принимает произвольную квадратную матрицу.
		Возвращает лист из трех матриц.

	*def QR(self): (QR разложение матрицы))
		Принимает произвольную квадратную матрицу.
		Возвращает лист из двух матриц.

	*def jordan_decomp(self): (Разложение Жордана матрицы))
		Принимает произвольную квадратную матрицу.
		Возвращает лист из трех матриц.

	*def polar_decomp(self): (Полярное разложение матрицы)
		Принимает произвольную квадратную матрицу.
		Возвращает лист из двух матриц.
	

	